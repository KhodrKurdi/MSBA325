# -*- coding: utf-8 -*-
"""MSBA325 - Streamlit Visualization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iu34MxoxXtU3IwrasMkjJQCHjb7APBaC
"""

# ---- Imports ----
import streamlit as st
import pandas as pd
import plotly.express as px

# ---- Page Setup ----
st.set_page_config(page_title="Tourism Data Visualization", layout="wide")

st.title("ðŸ“Š Tourism Data Visualization")
st.write("Exploring the impact of tourism amenities on the Tourism Index in Lebanon.")

# ---- Load Data ----
df = pd.read_csv("dataviz.csv")

# Clean governorate names from refArea URL
df["refArea_clean"] = df["refArea"].str.split("/").str[-1].str.replace("_", " ")

# ---- Feature Engineering: Tourism Amenities ----
df["Tourism Amenities"] = df[[
    "Total number of hotels",
    "Existence of guest houses - exists",
    "Existence of restaurants - exists",
    "Existence of initiatives and projects in the past five years to improve the tourism sector - exists",
    "Existence of cafes - exists"
]].sum(axis=1)

# ---- Calculations for Streamlit Cards ----
total_towns = df["Town"].nunique()
sum_of_initiatives = df["Existence of initiatives and projects in the past five years to improve the tourism sector - exists"].sum()
towns_no_initiatives = df[df["Existence of initiatives and projects in the past five years to improve the tourism sector - exists"] == 0]
count_towns_no_initiatives = len(towns_no_initiatives)
highest_tourism_index_row = df.loc[df['Tourism Index'].idxmax()]
town_with_highest_index = highest_tourism_index_row['Town']
ref_area_highest_index = highest_tourism_index_row['refArea_clean']

# ---- Streamlit Cards ----
st.subheader("Tourism Statistics")

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(label="Total Towns", value=total_towns)

with col2:
    st.metric(label="Total Initiatives", value=sum_of_initiatives)

with col3:
    st.metric(label="Towns with No Initiatives", value=count_towns_no_initiatives)

with col4:
    st.info(f"Town with Highest Tourism Index: {town_with_highest_index} in {ref_area_highest_index}")


# ---- Visualization 1: Scatter Plot ----
st.subheader("Scatter Plot: Tourism Amenities vs Tourism Index")

scatter = px.scatter(
    df,
    x="Tourism Amenities",  # Use the new feature
    y="Tourism Index",
    color="refArea_clean",
    hover_name="Town",
    size="Tourism Amenities", # Use the new feature
    title="Impact of Tourism Amenities on Tourism Index",
    labels={
        "Tourism Amenities": "Tourism Amenities Score", # Update label
        "Tourism Index": "Tourism Index",
        "refArea_clean": "Governorate"
    }
)

st.plotly_chart(scatter, use_container_width=True)

# ---- Visualization 2: Clustered Column Chart ----
st.subheader("Clustered Column Chart: Average Tourism Index by Amenities")

# Hotels
hotel_tourism = df.groupby("Existence of hotels - exists")["Tourism Index"].mean().reset_index()
hotel_tourism["Existence of hotels - exists"] = hotel_tourism["Existence of hotels - exists"].map({0: "No Hotel", 1: "Hotel"})
hotel_tourism = hotel_tourism.rename(columns={"Existence of hotels - exists": "Existence"})
hotel_tourism["Category"] = "Hotels"

# Restaurants
restaurant_tourism = df.groupby("Existence of restaurants - exists")["Tourism Index"].mean().reset_index()
restaurant_tourism["Existence of restaurants - exists"] = restaurant_tourism["Existence of restaurants - exists"].map({0: "No Restaurant", 1: "Restaurant"})
restaurant_tourism = restaurant_tourism.rename(columns={"Existence of restaurants - exists": "Existence"})
restaurant_tourism["Category"] = "Restaurants"

# Guest Houses
guest_house_tourism = df.groupby("Existence of guest houses - exists")["Tourism Index"].mean().reset_index()
guest_house_tourism["Existence of guest houses - exists"] = guest_house_tourism["Existence of guest houses - exists"].map({0: "No Guest House", 1: "Guest House"})
guest_house_tourism = guest_house_tourism.rename(columns={"Existence of guest houses - exists": "Existence"})
guest_house_tourism["Category"] = "Guest Houses"

# Combine data
combined_tourism = pd.concat([hotel_tourism, restaurant_tourism, guest_house_tourism])

# Grouped Bar Chart
bar = px.bar(
    combined_tourism,
    x="Category",
    y="Tourism Index",
    color="Existence",
    barmode="group",
    title="Average Tourism Index by Existence of Tourism Amenities",
    labels={"Tourism Index": "Average Tourism Index"}
)

st.plotly_chart(bar, use_container_width=True)
